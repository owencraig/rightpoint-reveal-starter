{"version":3,"names":[],"mappings":"","sources":["notes.js"],"sourcesContent":["/**\n * Handles opening of and synchronization with the reveal.js\n * notes window.\n *\n * Handshake process:\n * 1. This window posts 'connect' to notes window\n *    - Includes URL of presentation to show\n * 2. Notes window responds with 'connected' when it is available\n * 3. This window proceeds to send the current presentation state\n *    to the notes window\n */\nvar RevealNotes = (function() {\n\n\tfunction openNotes() {\n\t\tvar jsFileLocation = document.querySelector('script[src$=\"notes.js\"]').src;  // this js file path\n\t\tjsFileLocation = jsFileLocation.replace(/notes\\.js(\\?.*)?$/, '');   // the js folder path\n\t\tvar notesPopup = window.open( jsFileLocation + 'notes.html', 'reveal.js - Notes', 'width=1100,height=700' );\n\n\t\t/**\n\t\t * Connect to the notes window through a postmessage handshake.\n\t\t * Using postmessage enables us to work in situations where the\n\t\t * origins differ, such as a presentation being opened from the\n\t\t * file system.\n\t\t */\n\t\tfunction connect() {\n\t\t\t// Keep trying to connect until we get a 'connected' message back\n\t\t\tvar connectInterval = setInterval( function() {\n\t\t\t\tnotesPopup.postMessage( JSON.stringify( {\n\t\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\t\ttype: 'connect',\n\t\t\t\t\turl: window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search,\n\t\t\t\t\tstate: Reveal.getState()\n\t\t\t\t} ), '*' );\n\t\t\t}, 500 );\n\n\t\t\twindow.addEventListener( 'message', function( event ) {\n\t\t\t\tvar data = JSON.parse( event.data );\n\t\t\t\tif( data && data.namespace === 'reveal-notes' && data.type === 'connected' ) {\n\t\t\t\t\tclearInterval( connectInterval );\n\t\t\t\t\tonConnected();\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t/**\n\t\t * Posts the current slide data to the notes window\n\t\t */\n\t\tfunction post() {\n\n\t\t\tvar slideElement = Reveal.getCurrentSlide(),\n\t\t\t\tnotesElement = slideElement.querySelector( 'aside.notes' );\n\n\t\t\tvar messageData = {\n\t\t\t\tnamespace: 'reveal-notes',\n\t\t\t\ttype: 'state',\n\t\t\t\tnotes: '',\n\t\t\t\tmarkdown: false,\n\t\t\t\tstate: Reveal.getState()\n\t\t\t};\n\n\t\t\t// Look for notes defined in a slide attribute\n\t\t\tif( slideElement.hasAttribute( 'data-notes' ) ) {\n\t\t\t\tmessageData.notes = slideElement.getAttribute( 'data-notes' );\n\t\t\t}\n\n\t\t\t// Look for notes defined in an aside element\n\t\t\tif( notesElement ) {\n\t\t\t\tmessageData.notes = notesElement.innerHTML;\n\t\t\t\tmessageData.markdown = typeof notesElement.getAttribute( 'data-markdown' ) === 'string';\n\t\t\t}\n\n\t\t\tnotesPopup.postMessage( JSON.stringify( messageData ), '*' );\n\n\t\t}\n\n\t\t/**\n\t\t * Called once we have established a connection to the notes\n\t\t * window.\n\t\t */\n\t\tfunction onConnected() {\n\n\t\t\t// Monitor events that trigger a change in state\n\t\t\tReveal.addEventListener( 'slidechanged', post );\n\t\t\tReveal.addEventListener( 'fragmentshown', post );\n\t\t\tReveal.addEventListener( 'fragmenthidden', post );\n\t\t\tReveal.addEventListener( 'overviewhidden', post );\n\t\t\tReveal.addEventListener( 'overviewshown', post );\n\t\t\tReveal.addEventListener( 'paused', post );\n\t\t\tReveal.addEventListener( 'resumed', post );\n\n\t\t\t// Post the initial state\n\t\t\tpost();\n\n\t\t}\n\n\t\tconnect();\n\t}\n\n\tif( !/receiver/i.test( window.location.search ) ) {\n\n\t\t// If the there's a 'notes' query set, open directly\n\t\tif( window.location.search.match( /(\\?|\\&)notes/gi ) !== null ) {\n\t\t\topenNotes();\n\t\t}\n\n\t\t// Open the notes when the 's' key is hit\n\t\tdocument.addEventListener( 'keydown', function( event ) {\n\t\t\t// Disregard the event if the target is editable or a\n\t\t\t// modifier is present\n\t\t\tif ( document.querySelector( ':focus' ) !== null || event.shiftKey || event.altKey || event.ctrlKey || event.metaKey ) return;\n\n\t\t\tif( event.keyCode === 83 ) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\topenNotes();\n\t\t\t}\n\t\t}, false );\n\n\t}\n\n\treturn { open: openNotes };\n\n})();\n"],"file":"notes.js","sourceRoot":"/source/"}