{"version":3,"names":[],"mappings":"","sources":["markdown.js"],"sourcesContent":["/**\n * The reveal.js markdown plugin. Handles parsing of\n * markdown inside of presentations as well as loading\n * of external markdown documents.\n */\n(function( root, factory ) {\n\tif( typeof exports === 'object' ) {\n\t\tmodule.exports = factory( require( './marked' ) );\n\t}\n\telse {\n\t\t// Browser globals (root is window)\n\t\troot.RevealMarkdown = factory( root.marked );\n\t\troot.RevealMarkdown.initialize();\n\t}\n}( this, function( marked ) {\n\n\tif( typeof marked === 'undefined' ) {\n\t\tthrow 'The reveal.js Markdown plugin requires marked to be loaded';\n\t}\n\n\tif( typeof hljs !== 'undefined' ) {\n\t\tmarked.setOptions({\n\t\t\thighlight: function( lang, code ) {\n\t\t\t\treturn hljs.highlightAuto( lang, code ).value;\n\t\t\t}\n\t\t});\n\t}\n\n\tvar DEFAULT_SLIDE_SEPARATOR = '^\\r?\\n---\\r?\\n$',\n\t\tDEFAULT_NOTES_SEPARATOR = 'note:',\n\t\tDEFAULT_ELEMENT_ATTRIBUTES_SEPARATOR = '\\\\\\.element\\\\\\s*?(.+?)$',\n\t\tDEFAULT_SLIDE_ATTRIBUTES_SEPARATOR = '\\\\\\.slide:\\\\\\s*?(\\\\\\S.+?)$';\n\n\n\t/**\n\t * Retrieves the markdown contents of a slide section\n\t * element. Normalizes leading tabs/whitespace.\n\t */\n\tfunction getMarkdownFromSlide( section ) {\n\n\t\tvar template = section.querySelector( 'script' );\n\n\t\t// strip leading whitespace so it isn't evaluated as code\n\t\tvar text = ( template || section ).textContent;\n\n\t\tvar leadingWs = text.match( /^\\n?(\\s*)/ )[1].length,\n\t\t\tleadingTabs = text.match( /^\\n?(\\t*)/ )[1].length;\n\n\t\tif( leadingTabs > 0 ) {\n\t\t\ttext = text.replace( new RegExp('\\\\n?\\\\t{' + leadingTabs + '}','g'), '\\n' );\n\t\t}\n\t\telse if( leadingWs > 1 ) {\n\t\t\ttext = text.replace( new RegExp('\\\\n? {' + leadingWs + '}', 'g'), '\\n' );\n\t\t}\n\n\t\treturn text;\n\n\t}\n\n\t/**\n\t * Given a markdown slide section element, this will\n\t * return all arguments that aren't related to markdown\n\t * parsing. Used to forward any other user-defined arguments\n\t * to the output markdown slide.\n\t */\n\tfunction getForwardedAttributes( section ) {\n\n\t\tvar attributes = section.attributes;\n\t\tvar result = [];\n\n\t\tfor( var i = 0, len = attributes.length; i < len; i++ ) {\n\t\t\tvar name = attributes[i].name,\n\t\t\t\tvalue = attributes[i].value;\n\n\t\t\t// disregard attributes that are used for markdown loading/parsing\n\t\t\tif( /data\\-(markdown|separator|vertical|notes)/gi.test( name ) ) continue;\n\n\t\t\tif( value ) {\n\t\t\t\tresult.push( name + '=\"' + value + '\"' );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult.push( name );\n\t\t\t}\n\t\t}\n\n\t\treturn result.join( ' ' );\n\n\t}\n\n\t/**\n\t * Inspects the given options and fills out default\n\t * values for what's not defined.\n\t */\n\tfunction getSlidifyOptions( options ) {\n\n\t\toptions = options || {};\n\t\toptions.separator = options.separator || DEFAULT_SLIDE_SEPARATOR;\n\t\toptions.notesSeparator = options.notesSeparator || DEFAULT_NOTES_SEPARATOR;\n\t\toptions.attributes = options.attributes || '';\n\n\t\treturn options;\n\n\t}\n\n\t/**\n\t * Helper function for constructing a markdown slide.\n\t */\n\tfunction createMarkdownSlide( content, options ) {\n\n\t\toptions = getSlidifyOptions( options );\n\n\t\tvar notesMatch = content.split( new RegExp( options.notesSeparator, 'mgi' ) );\n\n\t\tif( notesMatch.length === 2 ) {\n\t\t\tcontent = notesMatch[0] + '<aside class=\"notes\" data-markdown>' + notesMatch[1].trim() + '</aside>';\n\t\t}\n\n\t\treturn '<script type=\"text/template\">' + content + '</script>';\n\n\t}\n\n\t/**\n\t * Parses a data string into multiple slides based\n\t * on the passed in separator arguments.\n\t */\n\tfunction slidify( markdown, options ) {\n\n\t\toptions = getSlidifyOptions( options );\n\n\t\tvar separatorRegex = new RegExp( options.separator + ( options.verticalSeparator ? '|' + options.verticalSeparator : '' ), 'mg' ),\n\t\t\thorizontalSeparatorRegex = new RegExp( options.separator );\n\n\t\tvar matches,\n\t\t\tlastIndex = 0,\n\t\t\tisHorizontal,\n\t\t\twasHorizontal = true,\n\t\t\tcontent,\n\t\t\tsectionStack = [];\n\n\t\t// iterate until all blocks between separators are stacked up\n\t\twhile( matches = separatorRegex.exec( markdown ) ) {\n\t\t\tnotes = null;\n\n\t\t\t// determine direction (horizontal by default)\n\t\t\tisHorizontal = horizontalSeparatorRegex.test( matches[0] );\n\n\t\t\tif( !isHorizontal && wasHorizontal ) {\n\t\t\t\t// create vertical stack\n\t\t\t\tsectionStack.push( [] );\n\t\t\t}\n\n\t\t\t// pluck slide content from markdown input\n\t\t\tcontent = markdown.substring( lastIndex, matches.index );\n\n\t\t\tif( isHorizontal && wasHorizontal ) {\n\t\t\t\t// add to horizontal stack\n\t\t\t\tsectionStack.push( content );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// add to vertical stack\n\t\t\t\tsectionStack[sectionStack.length-1].push( content );\n\t\t\t}\n\n\t\t\tlastIndex = separatorRegex.lastIndex;\n\t\t\twasHorizontal = isHorizontal;\n\t\t}\n\n\t\t// add the remaining slide\n\t\t( wasHorizontal ? sectionStack : sectionStack[sectionStack.length-1] ).push( markdown.substring( lastIndex ) );\n\n\t\tvar markdownSections = '';\n\n\t\t// flatten the hierarchical stack, and insert <section data-markdown> tags\n\t\tfor( var i = 0, len = sectionStack.length; i < len; i++ ) {\n\t\t\t// vertical\n\t\t\tif( sectionStack[i] instanceof Array ) {\n\t\t\t\tmarkdownSections += '<section '+ options.attributes +'>';\n\n\t\t\t\tsectionStack[i].forEach( function( child ) {\n\t\t\t\t\tmarkdownSections += '<section data-markdown>' +  createMarkdownSlide( child, options ) + '</section>';\n\t\t\t\t} );\n\n\t\t\t\tmarkdownSections += '</section>';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmarkdownSections += '<section '+ options.attributes +' data-markdown>' + createMarkdownSlide( sectionStack[i], options ) + '</section>';\n\t\t\t}\n\t\t}\n\n\t\treturn markdownSections;\n\n\t}\n\n\t/**\n\t * Parses any current data-markdown slides, splits\n\t * multi-slide markdown into separate sections and\n\t * handles loading of external markdown.\n\t */\n\tfunction processSlides() {\n\n\t\tvar sections = document.querySelectorAll( '[data-markdown]'),\n\t\t\tsection;\n\n\t\tfor( var i = 0, len = sections.length; i < len; i++ ) {\n\n\t\t\tsection = sections[i];\n\n\t\t\tif( section.getAttribute( 'data-markdown' ).length ) {\n\n\t\t\t\tvar xhr = new XMLHttpRequest(),\n\t\t\t\t\turl = section.getAttribute( 'data-markdown' );\n\n\t\t\t\tdatacharset = section.getAttribute( 'data-charset' );\n\n\t\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/element.getAttribute#Notes\n\t\t\t\tif( datacharset != null && datacharset != '' ) {\n\t\t\t\t\txhr.overrideMimeType( 'text/html; charset=' + datacharset );\n\t\t\t\t}\n\n\t\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t\tif( xhr.readyState === 4 ) {\n\t\t\t\t\t\t// file protocol yields status code 0 (useful for local debug, mobile applications etc.)\n\t\t\t\t\t\tif ( ( xhr.status >= 200 && xhr.status < 300 ) || xhr.status === 0 ) {\n\n\t\t\t\t\t\t\tsection.outerHTML = slidify( xhr.responseText, {\n\t\t\t\t\t\t\t\tseparator: section.getAttribute( 'data-separator' ),\n\t\t\t\t\t\t\t\tverticalSeparator: section.getAttribute( 'data-separator-vertical' ),\n\t\t\t\t\t\t\t\tnotesSeparator: section.getAttribute( 'data-separator-notes' ),\n\t\t\t\t\t\t\t\tattributes: getForwardedAttributes( section )\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\tsection.outerHTML = '<section data-state=\"alert\">' +\n\t\t\t\t\t\t\t\t'ERROR: The attempt to fetch ' + url + ' failed with HTTP status ' + xhr.status + '.' +\n\t\t\t\t\t\t\t\t'Check your browser\\'s JavaScript console for more details.' +\n\t\t\t\t\t\t\t\t'<p>Remember that you need to serve the presentation HTML from a HTTP server.</p>' +\n\t\t\t\t\t\t\t\t'</section>';\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\txhr.open( 'GET', url, false );\n\n\t\t\t\ttry {\n\t\t\t\t\txhr.send();\n\t\t\t\t}\n\t\t\t\tcatch ( e ) {\n\t\t\t\t\talert( 'Failed to get the Markdown file ' + url + '. Make sure that the presentation and the file are served by a HTTP server and the file can be found there. ' + e );\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse if( section.getAttribute( 'data-separator' ) || section.getAttribute( 'data-separator-vertical' ) || section.getAttribute( 'data-separator-notes' ) ) {\n\n\t\t\t\tsection.outerHTML = slidify( getMarkdownFromSlide( section ), {\n\t\t\t\t\tseparator: section.getAttribute( 'data-separator' ),\n\t\t\t\t\tverticalSeparator: section.getAttribute( 'data-separator-vertical' ),\n\t\t\t\t\tnotesSeparator: section.getAttribute( 'data-separator-notes' ),\n\t\t\t\t\tattributes: getForwardedAttributes( section )\n\t\t\t\t});\n\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsection.innerHTML = createMarkdownSlide( getMarkdownFromSlide( section ) );\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Check if a node value has the attributes pattern.\n\t * If yes, extract it and add that value as one or several attributes\n\t * the the terget element.\n\t *\n\t * You need Cache Killer on Chrome to see the effect on any FOM transformation\n\t * directly on refresh (F5)\n\t * http://stackoverflow.com/questions/5690269/disabling-chrome-cache-for-website-development/7000899#answer-11786277\n\t */\n\tfunction addAttributeInElement( node, elementTarget, separator ) {\n\n\t\tvar mardownClassesInElementsRegex = new RegExp( separator, 'mg' );\n\t\tvar mardownClassRegex = new RegExp( \"([^\\\"= ]+?)=\\\"([^\\\"=]+?)\\\"\", 'mg' );\n\t\tvar nodeValue = node.nodeValue;\n\t\tif( matches = mardownClassesInElementsRegex.exec( nodeValue ) ) {\n\n\t\t\tvar classes = matches[1];\n\t\t\tnodeValue = nodeValue.substring( 0, matches.index ) + nodeValue.substring( mardownClassesInElementsRegex.lastIndex );\n\t\t\tnode.nodeValue = nodeValue;\n\t\t\twhile( matchesClass = mardownClassRegex.exec( classes ) ) {\n\t\t\t\telementTarget.setAttribute( matchesClass[1], matchesClass[2] );\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Add attributes to the parent element of a text node,\n\t * or the element of an attribute node.\n\t */\n\tfunction addAttributes( section, element, previousElement, separatorElementAttributes, separatorSectionAttributes ) {\n\n\t\tif ( element != null && element.childNodes != undefined && element.childNodes.length > 0 ) {\n\t\t\tpreviousParentElement = element;\n\t\t\tfor( var i = 0; i < element.childNodes.length; i++ ) {\n\t\t\t\tchildElement = element.childNodes[i];\n\t\t\t\tif ( i > 0 ) {\n\t\t\t\t\tj = i - 1;\n\t\t\t\t\twhile ( j >= 0 ) {\n\t\t\t\t\t\taPreviousChildElement = element.childNodes[j];\n\t\t\t\t\t\tif ( typeof aPreviousChildElement.setAttribute == 'function' && aPreviousChildElement.tagName != \"BR\" ) {\n\t\t\t\t\t\t\tpreviousParentElement = aPreviousChildElement;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj = j - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparentSection = section;\n\t\t\t\tif( childElement.nodeName ==  \"section\" ) {\n\t\t\t\t\tparentSection = childElement ;\n\t\t\t\t\tpreviousParentElement = childElement ;\n\t\t\t\t}\n\t\t\t\tif ( typeof childElement.setAttribute == 'function' || childElement.nodeType == Node.COMMENT_NODE ) {\n\t\t\t\t\taddAttributes( parentSection, childElement, previousParentElement, separatorElementAttributes, separatorSectionAttributes );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( element.nodeType == Node.COMMENT_NODE ) {\n\t\t\tif ( addAttributeInElement( element, previousElement, separatorElementAttributes ) == false ) {\n\t\t\t\taddAttributeInElement( element, section, separatorSectionAttributes );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts any current data-markdown slides in the\n\t * DOM to HTML.\n\t */\n\tfunction convertSlides() {\n\n\t\tvar sections = document.querySelectorAll( '[data-markdown]');\n\n\t\tfor( var i = 0, len = sections.length; i < len; i++ ) {\n\n\t\t\tvar section = sections[i];\n\n\t\t\t// Only parse the same slide once\n\t\t\tif( !section.getAttribute( 'data-markdown-parsed' ) ) {\n\n\t\t\t\tsection.setAttribute( 'data-markdown-parsed', true )\n\n\t\t\t\tvar notes = section.querySelector( 'aside.notes' );\n\t\t\t\tvar markdown = getMarkdownFromSlide( section );\n\n\t\t\t\tsection.innerHTML = marked( markdown );\n\t\t\t\taddAttributes( \tsection, section, null, section.getAttribute( 'data-element-attributes' ) ||\n\t\t\t\t\t\t\t\tsection.parentNode.getAttribute( 'data-element-attributes' ) ||\n\t\t\t\t\t\t\t\tDEFAULT_ELEMENT_ATTRIBUTES_SEPARATOR,\n\t\t\t\t\t\t\t\tsection.getAttribute( 'data-attributes' ) ||\n\t\t\t\t\t\t\t\tsection.parentNode.getAttribute( 'data-attributes' ) ||\n\t\t\t\t\t\t\t\tDEFAULT_SLIDE_ATTRIBUTES_SEPARATOR);\n\n\t\t\t\t// If there were notes, we need to re-add them after\n\t\t\t\t// having overwritten the section's HTML\n\t\t\t\tif( notes ) {\n\t\t\t\t\tsection.appendChild( notes );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// API\n\treturn {\n\n\t\tinitialize: function() {\n\t\t\tprocessSlides();\n\t\t\tconvertSlides();\n\t\t},\n\n\t\t// TODO: Do these belong in the API?\n\t\tprocessSlides: processSlides,\n\t\tconvertSlides: convertSlides,\n\t\tslidify: slidify\n\n\t};\n\n}));\n"],"file":"markdown.js","sourceRoot":"/source/"}